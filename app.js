require('dotenv').config();
const express = require('express');
const { ethers } = require('ethers');
const fs = require('fs');

const app = express();
app.use(express.json()); // To parse incoming JSON

// Load environment variables
const privateKey = process.env.PRIVATE_KEY;
const rpcUrl = process.env.RPC_URL;


// Setup provider and wallet
const provider = new ethers.providers.JsonRpcProvider(rpcUrl); // JsonRpcProvider from ethers.js
const wallet = new ethers.Wallet(privateKey, provider); // Create wallet with private key and provider


// ABI and Bytecode (generated by compiling the contract)
const abi = [
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_name",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_symbol",
				"type": "string"
			},
			{
				"internalType": "uint8",
				"name": "_decimals",
				"type": "uint8"
			},
			{
				"internalType": "uint256",
				"name": "_initialSupply",
				"type": "uint256"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "spender",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "Approval",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "Transfer",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "allowance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_spender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "_value",
				"type": "uint256"
			}
		],
		"name": "approve",
		"outputs": [
			{
				"internalType": "bool",
				"name": "success",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "balanceOf",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "decimals",
		"outputs": [
			{
				"internalType": "uint8",
				"name": "",
				"type": "uint8"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "name",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "symbol",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "totalSupply",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "_value",
				"type": "uint256"
			}
		],
		"name": "transfer",
		"outputs": [
			{
				"internalType": "bool",
				"name": "success",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "_to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "_value",
				"type": "uint256"
			}
		],
		"name": "transferFrom",
		"outputs": [
			{
				"internalType": "bool",
				"name": "success",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	}
];

const bytecode = "0x60806040523480156200001157600080fd5b506040516200148338038062001483833981810160405281019062000037919062000249565b83600090805190602001906200004f929190620000f9565b50826001908051906020019062000068929190620000f9565b5081600260006101000a81548160ff021916908360ff1602179055508160ff16600a620000969190620003a9565b81620000a39190620004e6565b600381905550600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505062000698565b828054620001079062000594565b90600052602060002090601f0160209004810192826200012b576000855562000177565b82601f106200014657805160ff191683800117855562000177565b8280016001018555821562000177579182015b828111156200017657825182559160200191906001019062000159565b5b5090506200018691906200018a565b5090565b5b80821115620001a55760008160009055506001016200018b565b5090565b6000620001c0620001ba846200031b565b620002e7565b905082815260208101848484011115620001d957600080fd5b620001e68482856200055e565b509392505050565b600082601f8301126200020057600080fd5b815162000212848260208601620001a9565b91505092915050565b6000815190506200022c8162000664565b92915050565b60008151905062000243816200067e565b92915050565b600080600080608085870312156200026057600080fd5b600085015167ffffffffffffffff8111156200027b57600080fd5b6200028987828801620001ee565b945050602085015167ffffffffffffffff811115620002a757600080fd5b620002b587828801620001ee565b9350506040620002c88782880162000232565b9250506060620002db878288016200021b565b91505092959194509250565b6000604051905081810181811067ffffffffffffffff8211171562000311576200031062000628565b5b8060405250919050565b600067ffffffffffffffff82111562000339576200033862000628565b5b601f19601f8301169050602081019050919050565b6000808291508390505b6001851115620003a057808604811115620003785762000377620005ca565b5b6001851615620003885780820291505b8081029050620003988562000657565b945062000358565b94509492505050565b6000620003b68262000547565b9150620003c38362000547565b9250620003f27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484620003fa565b905092915050565b6000826200040c5760019050620004df565b816200041c5760009050620004df565b8160018114620004355760028114620004405762000476565b6001915050620004df565b60ff841115620004555762000454620005ca565b5b8360020a9150848211156200046f576200046e620005ca565b5b50620004df565b5060208310610133831016604e8410600b8410161715620004b05782820a905083811115620004aa57620004a9620005ca565b5b620004df565b620004bf84848460016200034e565b92509050818404811115620004d957620004d8620005ca565b5b81810290505b9392505050565b6000620004f38262000547565b9150620005008362000547565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200053c576200053b620005ca565b5b828202905092915050565b6000819050919050565b600060ff82169050919050565b60005b838110156200057e57808201518184015260208101905062000561565b838111156200058e576000848401525b50505050565b60006002820490506001821680620005ad57607f821691505b60208210811415620005c457620005c3620005f9565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008160011c9050919050565b6200066f8162000547565b81146200067b57600080fd5b50565b620006898162000551565b81146200069557600080fd5b50565b610ddb80620006a86000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461013457806370a082311461015257806395d89b4114610182578063a9059cbb146101a0578063dd62ed3e146101d057610093565b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100e657806323b872dd14610104575b600080fd5b6100a0610200565b6040516100ad9190610b10565b60405180910390f35b6100d060048036038101906100cb91906109d3565b61028e565b6040516100dd9190610af5565b60405180910390f35b6100ee610380565b6040516100fb9190610b72565b60405180910390f35b61011e60048036038101906101199190610984565b610386565b60405161012b9190610af5565b60405180910390f35b61013c610678565b6040516101499190610b8d565b60405180910390f35b61016c6004803603810190610167919061091f565b61068b565b6040516101799190610b72565b60405180910390f35b61018a6106a3565b6040516101979190610b10565b60405180910390f35b6101ba60048036038101906101b591906109d3565b610731565b6040516101c79190610af5565b60405180910390f35b6101ea60048036038101906101e59190610948565b6108d0565b6040516101f79190610b72565b60405180910390f35b6000805461020d90610cd6565b80601f016020809104026020016040519081016040528092919081815260200182805461023990610cd6565b80156102865780601f1061025b57610100808354040283529160200191610286565b820191906000526020600020905b81548152906001019060200180831161026957829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161036e9190610b72565b60405180910390a36001905092915050565b60035481565b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561040a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040190610b52565b60405180910390fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211156104c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c090610b32565b60405180910390fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105189190610c1a565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461056e9190610bc4565b9250508190555081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106019190610c1a565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106659190610b72565b60405180910390a3600190509392505050565b600260009054906101000a900460ff1681565b60046020528060005260406000206000915090505481565b600180546106b090610cd6565b80601f01602080910402602001604051908101604052809291908181526020018280546106dc90610cd6565b80156107295780601f106106fe57610100808354040283529160200191610729565b820191906000526020600020905b81548152906001019060200180831161070c57829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156107b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ac90610b52565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108049190610c1a565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461085a9190610bc4565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516108be9190610b72565b60405180910390a36001905092915050565b6005602052816000526040600020602052806000526040600020600091509150505481565b60008135905061090481610d77565b92915050565b60008135905061091981610d8e565b92915050565b60006020828403121561093157600080fd5b600061093f848285016108f5565b91505092915050565b6000806040838503121561095b57600080fd5b6000610969858286016108f5565b925050602061097a858286016108f5565b9150509250929050565b60008060006060848603121561099957600080fd5b60006109a7868287016108f5565b93505060206109b8868287016108f5565b92505060406109c98682870161090a565b9150509250925092565b600080604083850312156109e657600080fd5b60006109f4858286016108f5565b9250506020610a058582860161090a565b9150509250929050565b610a1881610c60565b82525050565b6000610a2982610ba8565b610a338185610bb3565b9350610a43818560208601610ca3565b610a4c81610d66565b840191505092915050565b6000610a64601283610bb3565b91507f416c6c6f77616e636520657863656564656400000000000000000000000000006000830152602082019050919050565b6000610aa4601483610bb3565b91507f496e73756666696369656e742062616c616e63650000000000000000000000006000830152602082019050919050565b610ae081610c8c565b82525050565b610aef81610c96565b82525050565b6000602082019050610b0a6000830184610a0f565b92915050565b60006020820190508181036000830152610b2a8184610a1e565b905092915050565b60006020820190508181036000830152610b4b81610a57565b9050919050565b60006020820190508181036000830152610b6b81610a97565b9050919050565b6000602082019050610b876000830184610ad7565b92915050565b6000602082019050610ba26000830184610ae6565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610bcf82610c8c565b9150610bda83610c8c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c0f57610c0e610d08565b5b828201905092915050565b6000610c2582610c8c565b9150610c3083610c8c565b925082821015610c4357610c42610d08565b5b828203905092915050565b6000610c5982610c6c565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610cc1578082015181840152602081019050610ca6565b83811115610cd0576000848401525b50505050565b60006002820490506001821680610cee57607f821691505b60208210811415610d0257610d01610d37565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b610d8081610c4e565b8114610d8b57600080fd5b50565b610d9781610c8c565b8114610da257600080fd5b5056fea26469706673582212206010003ddadd99fd11d0a1b7a993baf424e04f148d90e7537cb12079cbe616cd64736f6c63430008000033";


// API endpoint to deploy token contract
app.post('/deployToken', async (req, res) => {
    const { name, symbol, decimals, totalSupply } = req.body;

    if (!name || !symbol || !decimals || !totalSupply) {
        return res.status(400).json({ error: 'Missing required fields' });
    }

    try {
        // Create contract factory
        const factory = new ethers.ContractFactory(abi, bytecode, wallet);

        // Deploy contract with the provided parameters
        const contract = await factory.deploy(name, symbol, decimals, ethers.utils.parseUnits(totalSupply.toString(), decimals));

        console.log(`Deploying token: ${name}, Symbol: ${symbol}`);

        // Wait for the contract to be mined
        await contract.deployed();

        console.log(`Token deployed at address: ${contract.address}`);
        return res.json({ address: contract.address });
    } catch (error) {
        console.error('Error deploying contract:', error);
        return res.status(500).json({ error: 'Failed to deploy contract' });
    }
});

// Start the API server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
